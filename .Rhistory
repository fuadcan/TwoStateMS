p3dat$z <- 0
p <- plot_ly(data=rbind(p1dat,p2dat,p3dat),x = ~x, y = ~y, z = ~z, type = 'mesh3d',
intensity = seq(0,1,,180),color = seq(0,1,,180),colors = colorRamp(rainbow(180)))
p
p <- plot_ly(data=rbind(p1dat,p2dat,p3dat),x = ~x, y = ~y, z = ~z, type = 'mesh3d')
p
p1dat
p3dat
aa <- p3dat
aa <- aa[,1:2]
aa
zz <- outer(aa$x,aa$y, FUN = function(x,y) 16-4*x^2-4*y^2)
zz
zz <- outer(aa$x,aa$y, FUN = function(x,y) 16-4*x^2-4*y^2)
pp <- plot_ly(zz)
pp <- plot_ly(z=~zz)
pp
add_surface(pp)
aa
zz
xx <- seq(-3,3,,30)
yy <- xx
zz <- outer(aa$x,aa$y, FUN = function(x,y) 16-4*x^2-4*y^2)
zz <- outer(xx,yy, FUN = function(x,y) 16-4*x^2-4*y^2)
pp <- plot_ly(z=~zz)
add_surface(pp)
zz
xx <- seq(-4,4,,30)
yy <- xx
zz <- outer(xx,yy, FUN = function(x,y) 16-4*x^2-4*y^2)
pp <- plot_ly(z=~zz)
add_surface(pp)
zz
library('plotly')
p1dat <- circleFun(ely=1/2,npoints=60,diameter=8)
colnames(p1dat) <- c('y','z')
p1dat$x <- 0
p2dat <- circleFun(ely=1/2,npoints=60,diameter=8)
colnames(p2dat) <- c('x','z')
p2dat$y <- 0
plot(p3dat[,1:2])
dats <- lapply(seq(-4,4,,20), function(z) circleFun(diameter=sqrt(16-z^2)*2,npoints = 60))
dats <- lapply(seq(-4,4,,20), function(z) {d <- cbind(circleFun(diameter=sqrt(16-z^2)*2,npoints = 60),z); colnames(d) <- c('x','y','z'); d})
dats
p <- plot_ly(dats[[1]], x = ~x, y = ~y, z = ~z, type = 'scatter3d', mode = 'lines',name=paste0('z=',dats[[1]]$z[1]),
line = list(width = 3, color = ~c, colorscale = 'Viridis'))
p
for (r in seq(-4,4,,20)){
p <- add_paths(p,data = dats[[r]],x = ~x, y = ~y, z = ~z,name=paste0('z=',r))
}
dats[[2]]
p <- add_paths(p,data = dats[[2]],x = ~x, y = ~y, z = ~z,name=paste0('z=',r))
p
p <- add_paths(p,data = dats[[3]],x = ~x, y = ~y, z = ~z,name=paste0('z=',r))
p
seq(-4,4,,20)
p <- plot_ly(dats[[1]], x = ~x, y = ~y, z = ~z, type = 'scatter3d', mode = 'lines',name=paste0('z=',dats[[1]]$z[1]),
line = list(width = 3, color = ~c, colorscale = 'Viridis'))
for (r in 1:21){
p <- add_paths(p,data = dats[[r]],x = ~x, y = ~y, z = ~z,name=paste0('z=',r))
}
for (d in dats){
p <- add_paths(p,data = d,x = ~x, y = ~y, z = ~z,name=paste0('z=',d$z[1]))
}
p
dd <- do.call(rbind,dats)
dd
p<- plot_ly(dd, x = ~x, y = ~y, z = ~z,
type = "mesh3d",
intensity = c(0, 0.5, 1),
colorscale = list(c(0, 'rgb(255, 0, 0)'),
c(0.5, 'rgb(0, 255, 0)'),
c(1, 'rgb(0, 0, 255)')),
showscale = FALSE
)
p
library(cda)
library(rgl)
## single ellipsoid
plot3d(rgl.ellipsoid(a=2,b=1,c=5))
install.packages('cda')
install.packages("rgl")
install.packages("rgl")
install.packages("rgl")
install.packages("rgl")
install.packages("rgl")
if (requireNamespace("MASS")) {
Sigma <- matrix(c(10, 3, 0, 3, 2, 0, 0, 0, 1), 3, 3)
Mean <- 1:3
x <- MASS::mvrnorm(1000, Mean, Sigma)
open3d()
plot3d(x, box = FALSE)
plot3d( ellipse3d(Sigma, centre = Mean), col = "green", alpha = 0.5, add = TRUE)
}
# Plot the estimate and joint 90% confidence region for the displacement and cylinder
# count linear coefficients in the mtcars dataset
data(mtcars)
fit <- lm(mpg ~ disp + cyl , mtcars)
open3d()
plot3d(ellipse3d(fit, level = 0.90), col = "blue", alpha = 0.5, aspect = TRUE)
p
p <- plot_ly(dats[[1]], x = ~x, y = ~y, z = ~z, type = 'scatter3d', mode = 'lines',name=paste0('z=',dats[[1]]$z[1]),
line = list(width = 3, color = ~c, colorscale = 'Viridis'))
p <- add_paths(p,data = dats[[3]],x = ~x, y = ~y, z = ~z,name=paste0('z=',r))
for (d in dats){
p <- add_paths(p,data = d,x = ~x, y = ~y, z = ~z,name=paste0('z=',d$z[1]))
}
p
#just a sphere
theta = seq(0,2*pi,,100)
#just a sphere
theta <- seq(0,2*pi,,100)
phi   <- seq(0,pi,,100)
phi
outer(cos(theta),sin(phi))
x <- outer(cos(theta),sin(phi))
y <- outer(sin(theta),sin(phi))
z <- outer(ones(100),cos(phi))
z <- outer(rep(1,100),cos(phi))
z
p <- plot_ly(x=~x,y=~y,z=~z)
p
add_surface(p)
theta <- seq(0,2*pi,,100)
phi   <- seq(0,pi,,100)
x <- outer(2*cos(theta),sin(phi))
y <- outer(2*sin(theta),sin(phi))
z <- outer(rep(1,100),cos(phi))
p <- plot_ly(x=~x,y=~y,z=~z)
add_surface(p)
theta <- seq(0,2*pi,,100)
phi   <- seq(0,pi,,100)
x <- outer(2*cos(theta),sin(phi))
y <- outer(2*sin(theta),sin(phi))
z <- outer(rep(4,100),cos(phi))
p <- plot_ly(x=~x,y=~y,z=~z)
add_surface(p)
e^{-inf}
exp(-inf)
exp(-Inf)
x <- 1:10
plot(log(x))
plot(-log(x))
x <- seq(.1,8,.1)
plot(-log(x))
x <- seq(.1,.1,.01)
plot(-log(x))
x <- seq(-.1,.1,.01)
plot(-log(x))
x <- seq(.1,8,.1)
plot(-log(x))
0.2+ln(1:8)
0.2+log(1:8)
0.2+log(1:17)
seq(-.1,.1,,17) + 0.2+log(1:17)
seq(-.1,.1,,17) + 0.2+log(1:17)
aa <- (-8):8
aa/ 10 + .2 + log(aa+9)
aa/ 80 + .2 + log(aa+9)
aa
log(z/80+.8+log(z+9))
log(aa/80+.8+log(aa+9))
log(aa/80+.2+log(aa+9))
plot(log(aa/80+.2+log(aa+9)))
x <- seq(-2,2,,30)
y <- x^2
dats <- lapply((-8):8, function(z) data.frame(x=x,y=y-log(z/80+.2+log(z+9)),z=rep(z,30)))
p <- plot_ly(dats[[1]], x = ~x, y = ~y, z = ~z, type = 'scatter3d', mode = 'lines',name='z=-8',
line = list(width = 3, color = ~c, colorscale = 'Viridis'))
for (d in dats){
p <- add_paths(p,data = d,x = ~x, y = ~y, z = ~z,name=paste0('z=',d$z[1]))
}
p
circleFun <- function(center = c(0,0),diameter = 1, npoints = 100, elx=1, ely=1){
r = diameter / 2
tt <- seq(0,2*pi,length.out = npoints)
xx <- center[1] + ely * r * cos(tt)
yy <- center[2] + elx * r * sin(tt)
return(data.frame(x = xx, y = yy))
}
library(plotly)
library('plotly')
x <- seq(-2,2,,30)
y <- x^2
dats <- lapply((-8):8, function(z) data.frame(x=x,y=y-log(z/80+.2+log(z+9)),z=rep(z,30)))
p <- plot_ly(dats[[1]], x = ~x, y = ~y, z = ~z, type = 'scatter3d', mode = 'lines',name='z=-8',
line = list(width = 3, color = ~c, colorscale = 'Viridis'))
for (d in dats){
p <- add_paths(p,data = d,x = ~x, y = ~y, z = ~z,name=paste0('z=',d$z[1]))
}
p
x <- seq(-2,2,,30)
y <- x^2
dats <- lapply((-8):8, function(z) data.frame(x=x,y=y-log(z/80+.2+log(z+9))/5,z=rep(z,30)))
p <- plot_ly(dats[[1]], x = ~x, y = ~y, z = ~z, type = 'scatter3d', mode = 'lines',name='z=-8',
line = list(width = 3, color = ~c, colorscale = 'Viridis'))
for (d in dats){
p <- add_paths(p,data = d,x = ~x, y = ~y, z = ~z,name=paste0('z=',d$z[1]))
}
p
x <- seq(-3,3,,30)
y <- x^2
dats <- lapply((-8):8, function(z) data.frame(x=x,y=y-log(z/80+.2+log(z+9)),z=rep(z,30)))
p <- plot_ly(dats[[1]], x = ~x, y = ~y, z = ~z, type = 'scatter3d', mode = 'lines',name='z=-8',
line = list(width = 3, color = ~c, colorscale = 'Viridis'))
for (d in dats){
p <- add_paths(p,data = d,x = ~x, y = ~y, z = ~z,name=paste0('z=',d$z[1]))
}
p
x <- seq(-3,3,,30)
y <- x^2
dats <- lapply((-8):8, function(z) data.frame(x=x,y=y-log(z/80+.2+log(z+9))+2,z=rep(z,30)))
p <- plot_ly(dats[[1]], x = ~x, y = ~y, z = ~z, type = 'scatter3d', mode = 'lines',name='z=-8',
line = list(width = 3, color = ~c, colorscale = 'Viridis'))
for (d in dats){
p <- add_paths(p,data = d,x = ~x, y = ~y, z = ~z,name=paste0('z=',d$z[1]))
}
p
dats <- lapply(1:14, function(r) {d <- cbind(circleFun(npoints=60,diameter=2*r^2),r); colnames(d) <- c('x','y','z'); d})
p <- plot_ly(dats[[1]], x = ~x, y = ~y, z = ~z, type = 'scatter3d', mode = 'lines',name='z=1',
line = list(width = 3, color = ~c, colorscale = 'Viridis'))
for (r in 2:14){
p <- add_paths(p,data = dats[[r]],x = ~x, y = ~y, z = ~z,name=paste0('z=',r))
}
p
p1dat <- circleFun(ely=1/3,npoints=60,diameter=12)
colnames(p1dat) <- c('x','z')
p1dat <- p1dat[p1dat$z>=0,]
p1dat$y <- 0
p2dat <- circleFun(ely=.5,diameter = 12,npoints=60)
colnames(p2dat) <- c('y','z')
p2dat <- p2dat[p2dat$z>=0,]
p2dat$x <- 0
p3dat <- circleFun(elx=.5,ely=1/3,diameter = 12,npoints=30)
p3dat$z <- 0
library('plotly')
p1 <- plot_ly(p1dat, x = ~x, y = ~y, z = ~z, type = 'scatter3d', mode = 'lines',name='9x^2 + z^2 = 36',
line = list(width = 3, color = ~c, colorscale = 'Viridis'))
p2 <- add_lines(p1,data = p2dat,x = ~x, y = ~y, z = ~z,name='4y^2 + z^2=36')
p3 <- add_paths(p2,data = p3dat,x = ~x, y = ~y, z = ~z,name='9x^2+4y^2=36')
p1
p2
p3
nps <- 500
p1dat <- circleFun(ely=1/3,npoints=nps,diameter=12)
colnames(p1dat) <- c('x','z')
p1dat <- p1dat[p1dat$z>=0,]
p1dat$y <- 0
p2dat <- circleFun(ely=.5,diameter = 12,npoints=nps)
colnames(p2dat) <- c('y','z')
p2dat <- p2dat[p2dat$z>=0,]
p2dat$x <- 0
p3dat <- circleFun(elx=.5,ely=1/3,diameter = 12,npoints=nps)
p3dat$z <- 0
dat <- rbind(p1dat,p2dat,p3dat)
p <- plot_ly(data=dat,x = ~x, y = ~y, z = ~z, type = 'mesh3d',
intensity = seq(0,1,,nrow(dat)),color = seq(0,1,,nrow(dat)),colors = colorRamp(rainbow(nrow(dat))))
p
library('plotly')
y <- seq(0,2,length=10)
z <- 10-5*y
x <- rep(0,10)
dat <- data.frame(x,y,z)
p1 <- plot_ly(dat, x = ~x, y = ~y, z = ~z, type = 'scatter3d', mode = 'lines',name='z=10-5y',
line = list(width = 3, color = ~c, colorscale = 'Viridis'))
x <- seq(0,2.5,length=10)
z <- 10-4*x
y <- rep(0,10)
dat <- data.frame(x,y,z)
p2 <- add_lines(p1,data = dat,x = ~x, y = ~y, z = ~z,name='z=10-4x')
x <- seq(0,2.5,length=10)
y <- 2-4/5*x
z <- rep(0,10)
dat <- data.frame(x,y,z)
p3 <- add_lines(p2,data = dat,x = ~x, y = ~y, z = ~z,name='y=2-(4/5)x')
p1
p2
p3
library('plotly')
y <- seq(0,2,length=10)
z <- 10-5*y
x <- rep(0,10)
dat <- data.frame(x,y,z)
cumdat <- dat
x <- seq(0,2.5,length=10)
z <- 10-4*x
y <- rep(0,10)
dat <- data.frame(x,y,z)
cumdat <- rbind(cumdat,dat)
x <- seq(0,2.5,length=10)
y <- 2-4/5*x
z <- rep(0,10)
dat <- data.frame(x,y,z)
cumdat <- rbind(cumdat,dat)
p <- plot_ly(data=cumdat,x = ~x, y = ~y, z = ~z, type = 'mesh3d')
p
library('plotly')
theta <- seq(0,2*pi,,100)
phi   <- seq(0,pi,,100)
x <- outer(2*cos(theta),sin(phi))
y <- outer(2*sin(theta),sin(phi))
z <- outer(rep(4,100),cos(phi))
p <- plot_ly(x=~x,y=~y,z=~z)
add_surface(p)
p1dat <- circleFun(ely=1/2,npoints=60,diameter=8)
colnames(p1dat) <- c('y','z')
p1dat$x <- 0
p2dat <- circleFun(ely=1/2,npoints=60,diameter=8)
colnames(p2dat) <- c('x','z')
p2dat$y <- 0
p3dat <- circleFun(diameter = 4,npoints=60)
p3dat$z <- 0
library('plotly')
p1 <- plot_ly(p1dat, x = ~x, y = ~y, z = ~z, type = 'scatter3d', mode = 'lines',name='4x^2 + z^2 = 16',
line = list(width = 3, color = ~c, colorscale = 'Viridis',dash='dot'))
p2 <- add_paths(p1,data = p2dat,x = ~x, y = ~y, z = ~z,name='4y^2 + z^2 = 16',dash='dot')
p3 <- add_paths(p2,data = p3dat,x = ~x, y = ~y, z = ~z,name='4x^2 + 4y^2 = 16',dash='dot')
p1
p2
p3
library('plotly')
y <- seq(-4,4,length=30)
z <- abs(y)
x <- rep(0,30)
p1dat <- data.frame(x,y,z)
p1 <- plot_ly(p1dat, x = ~x, y = ~y, z = ~z, type = 'scatter3d', mode = 'lines',name='z=abs(y)',
line = list(width = 3, color = ~c, colorscale = 'Viridis'))
x <- seq(-4,4,length=30)
z <- abs(x)
y <- rep(0,30)
p2dat <- data.frame(x,y,z)
p2 <- add_lines(p1,data = p2dat,x = ~x, y = ~y, z = ~z,name='z=abs(x)')
nps <- 30
p3dat <- circleFun(npoints=nps,diameter=2)
p3dat$z <- 1
p3 <- add_paths(p2,data = p3dat,x = ~x, y = ~y, z = ~z,name='x^2+y^2=1')
nps <- 30
p4dat <- circleFun(npoints=nps,diameter=8)
p4dat$z <- 4
p4 <- add_paths(p3,data = p4dat,x = ~x, y = ~y, z = ~z,name='x^2+y^2=1')
p1
p2
p3
p4
library('plotly')
y <- seq(-4,4,length=30)
z <- abs(y)
x <- rep(0,30)
p1dat <- data.frame(x,y,z)
p1 <- plot_ly(p1dat, x = ~x, y = ~y, z = ~z, type = 'scatter3d', mode = 'lines',name='z=abs(y)',
line = list(width = 3, color = ~c, colorscale = 'Viridis'))
x <- seq(-4,4,length=30)
z <- abs(x)
y <- rep(0,30)
p2dat <- data.frame(x,y,z)
p2 <- add_lines(p1,data = p2dat,x = ~x, y = ~y, z = ~z,name='z=abs(x)')
nps <- 30
p3dat <- circleFun(npoints=nps,diameter=2)
p3dat$z <- 1
p3 <- add_paths(p2,data = p3dat,x = ~x, y = ~y, z = ~z,name='x^2+y^2=1')
nps <- 30
p4dat <- circleFun(npoints=nps,diameter=8)
p4dat$z <- 4
p4 <- add_paths(p3,data = p4dat,x = ~x, y = ~y, z = ~z,name='x^2+y^2=16')
p1
p2
p3
p4
library('plotly')
y <- seq(-4,4,length=30)
z <- abs(y)
x <- rep(0,30)
p1dat <- data.frame(x,y,z)
x <- seq(-4,4,length=30)
z <- abs(x)
y <- rep(0,30)
p2dat <- data.frame(x,y,z)
nps <- 30
p3dat <- circleFun(npoints=nps,diameter=8)
p3dat$z <- 4
p <- plot_ly(data=rbind(p1dat,p2dat,p3dat),x = ~x, y = ~y, z = ~z, type = 'mesh3d',
intensity = seq(0,1,,90),color = seq(0,1,,90),colors = colorRamp(rainbow(90)))
p
setwd("TwoStateMS")
source("MSArfimaFit.R")
source("dlvPath.R")
# Read data
dat  <- read.csv("data/madisonFrom-1930.csv",sep=";")
dat  <- log(dat)
yearrange <- seq(1930,1930+nrow(dat)-1)
# Log differences of each pair
pdat <- apply(combn(ncol(dat),2),2,function(c) dat[,c[1]]-dat[,c[2]] )
pnames <- apply(combn(ncol(dat),2),2,function(c) paste0(colnames(dat)[c[1]],"-",colnames(dat)[c[2]] ))
colnames(pdat) <- pnames
# The first series of the data
ser     <- pdat[,1]
sername <- pnames[1]
## only d switch states
opt  <- MSArfima.fit(ser,"D")
path <- dlvPath_d(opt$par,ser)
dplot <- c(opt$par[1:2] %*% path)
plot(yearrange, dplot, type='l',xlab = "Year",ylab = "d")
title(sername)
## only d and mu switch states
opt  <- MSArfima.fit(ser,"DM")
path <- dlvPath_dm(opt$par,ser)
dplot  <- c(opt$par[1:2] %*% path)
muplot <- c(tail(opt$par,2) %*% path)
plot(yearrange, dplot, type='l',xlab = "Year",ylab = "d")
title(sername)
plot(yearrange, muplot, type='l',xlab = "Year",ylab = "mu")
title(sername)
## only d and sigma switch states
opt  <- MSArfima.fit(ser,"DS")
path <- dlvPath_ds(opt$par,ser)
dplot     <- c(opt$par[1:2] %*% path)
sigmaplot <- c(opt$par[5:6] %*% path)
plot(yearrange, dplot, type='l',xlab = "Year",ylab = "d")
title(sername)
plot(yearrange, sigmaplot, type='l',xlab = "Year",ylab = "sigma")
title(sername)
## d, sigma and mu switch states
opt  <- MSArfima.fit(ser,"DMS")
path <- dlvPath_dsm(opt$par,ser)
dplot <- c(opt$par[1:2] %*% path)
muplot    <- c(opt$par[7:8] %*% path)
sigmaplot <- c(opt$par[5:6] %*% path)
plot(yearrange, dplot, type='l',xlab = "Year",ylab = "d")
title(sername)
plot(yearrange, muplot, type='l',xlab = "Year",ylab = "mu")
title(sername)
plot(yearrange, sigmaplot, type='l',xlab = "Year",ylab = "sigma")
title(sername)
setwd("TwoStateMS")
source("MSArfimaFit.R")
setwd("Documents/TwoStateMS/")
setwd("TwoStateMS")
source("MSArfimaFit.R")
source("dlvPath.R")
# Read data
dat  <- read.csv("data/madisonFrom-1930.csv",sep=";")
dat  <- log(dat)
yearrange <- seq(1930,1930+nrow(dat)-1)
# Log differences of each pair
pdat <- apply(combn(ncol(dat),2),2,function(c) dat[,c[1]]-dat[,c[2]] )
pnames <- apply(combn(ncol(dat),2),2,function(c) paste0(colnames(dat)[c[1]],"-",colnames(dat)[c[2]] ))
colnames(pdat) <- pnames
# The first series of the data
ser     <- pdat[,1]
sername <- pnames[1]
## only d switch states
opt  <- MSArfima.fit(ser,"D")
path <- dlvPath_d(opt$par,ser)
dplot <- c(opt$par[1:2] %*% path)
plot(yearrange, dplot, type='l',xlab = "Year",ylab = "d")
title(sername)
## only d and mu switch states
opt  <- MSArfima.fit(ser,"DM")
path <- dlvPath_dm(opt$par,ser)
dplot  <- c(opt$par[1:2] %*% path)
muplot <- c(tail(opt$par,2) %*% path)
plot(yearrange, dplot, type='l',xlab = "Year",ylab = "d")
title(sername)
plot(yearrange, muplot, type='l',xlab = "Year",ylab = "mu")
title(sername)
## only d and sigma switch states
opt  <- MSArfima.fit(ser,"DS")
path <- dlvPath_ds(opt$par,ser)
dplot     <- c(opt$par[1:2] %*% path)
sigmaplot <- c(opt$par[5:6] %*% path)
plot(yearrange, dplot, type='l',xlab = "Year",ylab = "d")
title(sername)
plot(yearrange, sigmaplot, type='l',xlab = "Year",ylab = "sigma")
title(sername)
## d, sigma and mu switch states
opt  <- MSArfima.fit(ser,"DMS")
path <- dlvPath_dsm(opt$par,ser)
dplot <- c(opt$par[1:2] %*% path)
muplot    <- c(opt$par[7:8] %*% path)
sigmaplot <- c(opt$par[5:6] %*% path)
plot(yearrange, dplot, type='l',xlab = "Year",ylab = "d")
title(sername)
plot(yearrange, muplot, type='l',xlab = "Year",ylab = "mu")
title(sername)
plot(yearrange, sigmaplot, type='l',xlab = "Year",ylab = "sigma")
title(sername)
lne <- c(rep(0,50),rep(1,50))
lne <- c(rep(0,50),rep(1,50))
sct <- c(rnorm(50),rnorm(50,1))
plot(lne,type="l")
lines(sct, type="d")
lines(sct, type="dashed")
lines(sct, type="l", pch=2)
lines(sct, type="l", pch=3)
lne <- c(rep(0,50),rep(1,50))
sct <- c(rnorm(50),rnorm(50,1,.1))
plot(lne,type="l")
lines(sct, type="l", pch=3)
lne <- c(rep(0,50),rep(1,50))
sct <- c(rnorm(50,,1),rnorm(50,1,.1))
plot(lne,type="l")
lines(sct, type="l", pch=3)
sct <- c(rnorm(50,,.1),rnorm(50,1,.1))
plot(lne,type="l")
lines(sct, type="l", pch=3)
lines(sct, type="l", pty=3)
plot(lne,type="l")
lines(sct, type="l", pty=3)
plot(lne,type="l")
lines(sct, type="l", pty=2)
plot(lne,type="l")
lines(sct, type="l", lty=2)
